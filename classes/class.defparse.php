<?php
/////////////////////////////////////////////////////////////////////////////////////
// This class is used to extract all definitions for a word.
// See the language.config.php file for setting language specific parameters.
/////////////////////////////////////////////////////////////////////////////////////

class DefParse {
/////////////////////////////////////////////////////////////////////////////////////
// Variables
/////////////////////////////////////////////////////////////////////////////////////	
	private $defarray;
	private $langcode;
	private $count;
	
	private $deftag;
	private $exampletag;
	private $langheader;
	private $langseparator;
	
/////////////////////////////////////////////////////////////////////////////////////
// construct
/////////////////////////////////////////////////////////////////////////////////////	
	public function __construct($wikitext, $langcode, $count) {
		$this->setLangParam($langcode);
		$this->extractTextLang($wikitext);
		$this->defarray = $this->extractDef($this->wikitext, $count);
		$this->defarray = $this->stripTags();
	}
/////////////////////////////////////////////////////////////////////////////////////
// public methods
/////////////////////////////////////////////////////////////////////////////////////
	public function getDef() {
		return $this->defarray;
	}
/////////////////////////////////////////////////////////////////////////////////////
// private methods
/////////////////////////////////////////////////////////////////////////////////////
// Extracts all definitions by splitting at new lines and matching for definition
// tags set in paramaters.
/////////////////////////////////////////////////////////////////////////////////////
	private function extractDef($wikitext, $count) {
		$defarray = array();

		$explodenewline = preg_split("/\n|\r/", $wikitext);
		foreach ($explodenewline as $value) {
			if (strpos($value, $this->deftag) === 0) {
				$defarray[] = $value;
			}
		}
		if (empty($defarray) !== true) {
			$defarray = array_slice($defarray, 0, $count);
			return $defarray;
		}
		else {
			die("No definitions found for specified word.");
		}
	}
/////////////////////////////////////////////////////////////////////////////////////
// Strips tags used for additional info and links to other words.
/////////////////////////////////////////////////////////////////////////////////////
	private function stripTags() {
	// Strip anything enclosed between {{ }}
		$strippedarray = preg_replace('(\{\{.*?\}\})', "", $this->defarray);
	// Remove 1st half of [[word|Word]] strings.
		$strippedarray = preg_replace('(\[\[[^\]]*?\|)u', "", $strippedarray);
	// Remove brackets [[
		$strippedarray = str_replace("[[", "", $strippedarray);
	// Remove brackets ]]
		$strippedarray = str_replace("]]", "", $strippedarray);
	// Remove definition identifier
		$strippedarray = str_replace($this->deftag, "", $strippedarray);
		
		return $strippedarray;
	}
/////////////////////////////////////////////////////////////////////////////////////
// Extracts text based on set language header and separator.
/////////////////////////////////////////////////////////////////////////////////////
	private function extractTextLang($wikitext) {
		include 'extracttextlang.php'; // Sets $this->wikitext
	}
/////////////////////////////////////////////////////////////////////////////////////
// Switch for language parameters.
/////////////////////////////////////////////////////////////////////////////////////
	private function setLangParam($langcode) {
		include './language.config.php';
	}
} // End of class.
?>